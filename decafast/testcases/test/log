aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

aqs-2.decaf
Program(None,Package(QuickSort,FieldDecl(list,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

aqs-3.decaf
Program(None,Package(QuickSort,None,Method(cr,VoidType,None,MethodBlock(None,MethodCall(print_string,StringConstant("\n"))))))

aqs-4.decaf
Program(None,Package(QuickSort,None,Method(displayList,VoidType,VarDef(start,IntType),VarDef(len,IntType),MethodBlock(VarDef(j,IntType),MethodCall(print_string,StringConstant("List:\n")),ForStmt(AssignVar(j,VariableExpr(start)),BinaryExpr(Lt,VariableExpr(j),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len))),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,MethodCall(print_int,ArrayLocExpr(list,VariableExpr(j))),MethodCall(print_string,StringConstant(" ")),IfStmt(BinaryExpr(Or,BinaryExpr(Eq,BinaryExpr(Mod,BinaryExpr(Plus,BinaryExpr(Minus,VariableExpr(j),VariableExpr(start)),NumberExpr(1)),NumberExpr(20)),NumberExpr(0)),BinaryExpr(Eq,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1)),BinaryExpr(Plus,VariableExpr(start),VariableExpr(len)))),Block(None,MethodCall(cr,None)),None)))))))

aqs-5.decaf
Program(None,Package(QuickSort,None,Method(initList,VoidType,VarDef(size,IntType),MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignArrayLoc(list,VariableExpr(i),BinaryExpr(Mod,BinaryExpr(Mult,VariableExpr(i),NumberExpr(2382983)),NumberExpr(100)))))))))

aqs-6.decaf
Program(None,Package(QuickSort,None,Method(swap,VoidType,VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),MethodBlock(VarDef(temp,IntType),AssignVar(temp,ArrayLocExpr(list,VariableExpr(leftPtr))),AssignArrayLoc(list,VariableExpr(leftPtr),ArrayLocExpr(list,VariableExpr(rightPtr))),AssignArrayLoc(list,VariableExpr(rightPtr),VariableExpr(temp))))))

aqs-7.decaf
Program(None,Package(QuickSort,None,Method(quickSort,VoidType,VarDef(left,IntType),VarDef(right,IntType),MethodBlock(None,IfStmt(BinaryExpr(Leq,BinaryExpr(Minus,VariableExpr(right),VariableExpr(left)),NumberExpr(0)),Block(None,ReturnStmt(None)),Block(VarDef(pivot,IntType),VarDef(part,IntType),AssignVar(pivot,ArrayLocExpr(list,VariableExpr(right))),AssignVar(part,MethodCall(partition,VariableExpr(left),VariableExpr(right),VariableExpr(pivot))),MethodCall(quickSort,VariableExpr(left),BinaryExpr(Minus,VariableExpr(part),NumberExpr(1))),MethodCall(quickSort,BinaryExpr(Plus,VariableExpr(part),NumberExpr(1)),VariableExpr(right))))))))

aqs-8.decaf
Program(None,Package(QuickSort,None,Method(main,VoidType,None,MethodBlock(VarDef(size,IntType),AssignVar(size,NumberExpr(100)),MethodCall(initList,VariableExpr(size)),MethodCall(displayList,NumberExpr(0),VariableExpr(size)),MethodCall(quickSort,NumberExpr(0),BinaryExpr(Minus,VariableExpr(size),NumberExpr(1))),MethodCall(print_string,StringConstant("After sorting:\n")),MethodCall(displayList,NumberExpr(0),VariableExpr(size))))))

aqs-9.decaf
Program(None,Package(QuickSort,None,Method(partition,IntType,VarDef(left,IntType),VarDef(right,IntType),VarDef(pivot,IntType),MethodBlock(VarDef(leftPtr,IntType),VarDef(rightPtr,IntType),AssignVar(leftPtr,BinaryExpr(Minus,VariableExpr(left),NumberExpr(1))),AssignVar(rightPtr,VariableExpr(right)),WhileStmt(BoolExpr(True),Block(None,WhileStmt(BoolExpr(True),Block(None,AssignVar(leftPtr,BinaryExpr(Plus,VariableExpr(leftPtr),NumberExpr(1))),IfStmt(BinaryExpr(Geq,ArrayLocExpr(list,VariableExpr(leftPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),WhileStmt(BoolExpr(True),Block(None,IfStmt(BinaryExpr(Leq,VariableExpr(rightPtr),NumberExpr(0)),Block(None,BreakStmt),None),AssignVar(rightPtr,BinaryExpr(Minus,VariableExpr(rightPtr),NumberExpr(1))),IfStmt(BinaryExpr(Leq,ArrayLocExpr(list,VariableExpr(rightPtr)),VariableExpr(pivot)),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,BreakStmt),Block(None,MethodCall(swap,VariableExpr(leftPtr),VariableExpr(rightPtr)))))),MethodCall(swap,VariableExpr(leftPtr),VariableExpr(right)),ReturnStmt(VariableExpr(leftPtr))))))

aqs.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(QuickSort,FieldDecl(x,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

bitshift_large.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_large,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(2)),AssignVar(___,BinaryExpr(Rightshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(30))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Leftshift,VariableExpr(___),NumberExpr(31))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(BoolExpr(False))))))

bitshift_small.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(bitshift_small,None,Method(main,BoolType,None,MethodBlock(VarDef(_,IntType),VarDef(__,IntType),VarDef(___,IntType),AssignVar(_,NumberExpr(4)),AssignVar(__,NumberExpr(3)),AssignVar(___,BinaryExpr(Leftshift,VariableExpr(_),VariableExpr(__))),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(2))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(5))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Rightshift,VariableExpr(___),NumberExpr(6))),MethodCall(print_string,StringConstant("\n")),ReturnStmt(NumberExpr(0))))))

breaktest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(breaktest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(20)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(1)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(2)),Block(None,IfStmt(BinaryExpr(Gt,VariableExpr(i),NumberExpr(3)),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),Block(None,ContinueStmt,MethodCall(print_int,NumberExpr(3)),BreakStmt),Block(None,IfStmt(BinaryExpr(Lt,VariableExpr(i),NumberExpr(15)),Block(None,WhileStmt(BoolExpr(True),Block(None,BreakStmt,BreakStmt)),MethodCall(print_int,VariableExpr(i)),BreakStmt),None)))),None)),None)),None)))))))

catalan2.decaf

catalan3.decaf

decafast

float.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(float,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),AssignVar(x,UnaryExpr(UnaryMinus,NumberExpr(14))),AssignVar(y,NumberExpr(13)),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant("/")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant(" = ")),MethodCall(print_int,BinaryExpr(Div,VariableExpr(x),VariableExpr(y))),MethodCall(print_string,StringConstant(".")),MethodCall(print_int,MethodCall(abs,BinaryExpr(Minus,BinaryExpr(Div,BinaryExpr(Mult,VariableExpr(x),NumberExpr(10000000)),VariableExpr(y)),BinaryExpr(Mult,BinaryExpr(Div,VariableExpr(x),VariableExpr(y)),NumberExpr(10000000))))),MethodCall(print_string,StringConstant("\n")))),Method(abs,IntType,VarDef(x,IntType),MethodBlock(None,IfStmt(BinaryExpr(Gt,VariableExpr(x),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(x))),None),ReturnStmt(UnaryExpr(UnaryMinus,VariableExpr(x)))))))

func-in-expr.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(reach,None,Method(five,IntType,None,MethodBlock(None,ReturnStmt(MethodCall(five,None)))),Method(main,IntType,None,MethodBlock(VarDef(x,IntType),MethodCall(print_string,StringConstant("hello\n")),ReturnStmt(NumberExpr(0)),AssignVar(x,NumberExpr(5)),ForStmt(AssignVar(x,NumberExpr(0)),BinaryExpr(Geq,VariableExpr(x),NumberExpr(0)),AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Div,MethodCall(five,None),NumberExpr(32))))),ReturnStmt(VariableExpr(x))))))

gcd2.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),Package(GreatestCommonDivisor,AssignGlobalVar(a,IntType,NumberExpr(10)),AssignGlobalVar(b,IntType,NumberExpr(20)),Method(main,IntType,None,MethodBlock(VarDef(z,IntType),MethodCall(print_int,MethodCall(gcd,VariableExpr(a),VariableExpr(b))))),Method(iszero,BoolType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,IfStmt(BinaryExpr(Eq,VariableExpr(b),NumberExpr(0)),Block(None,ReturnStmt(VariableExpr(a))),Block(None,ReturnStmt(MethodCall(gcd,VariableExpr(b),BinaryExpr(Mod,VariableExpr(a),VariableExpr(b)))))))),Method(gcd,IntType,VarDef(a,IntType),VarDef(b,IntType),MethodBlock(None,ReturnStmt(MethodCall(iszero,VariableExpr(a),VariableExpr(b)))))))

if-scoping.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(byone,FieldDecl(fin,IntType,Array(20)),Method(main,IntType,None,MethodBlock(VarDef(i,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(i,NumberExpr(0)),IfStmt(BinaryExpr(Gt,NumberExpr(2),VariableExpr(i)),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(2))),None),IfStmt(BinaryExpr(Lt,NumberExpr(2),VariableExpr(i)),Block(None,None),Block(VarDef(i,IntType),AssignVar(i,NumberExpr(6)))),MethodCall(print_int,VariableExpr(i)),MethodCall(print_string,StringConstant(",\r\n"))))))

incomplete10.decaf

incomplete1.decaf

incomplete2.decaf

incomplete3.decaf

incomplete4.decaf

incomplete5.decaf

incomplete6.decaf

incomplete7.decaf

incomplete8.decaf

incomplete9.decaf

log

loops.decaf
Program(None,Package(C,FieldDecl(x,IntType,Scalar),FieldDecl(size,IntType,Scalar),Method(f,VoidType,None,MethodBlock(VarDef(x,IntType),VarDef(i,IntType),AssignVar(size,NumberExpr(100)),WhileStmt(BoolExpr(True),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(leftPtr,NumberExpr(10)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),VariableExpr(size)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,AssignVar(x,NumberExpr(1)),AssignVar(rightPtr,NumberExpr(20)),IfStmt(BinaryExpr(Geq,VariableExpr(leftPtr),VariableExpr(rightPtr)),Block(None,AssignVar(x,NumberExpr(1))),None)))))))))

modulus.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(modulus,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),NumberExpr(3))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),NumberExpr(3))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(4),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(5),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,NumberExpr(6),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n")),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(4)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(5)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_int,BinaryExpr(Mod,UnaryExpr(UnaryMinus,NumberExpr(6)),UnaryExpr(UnaryMinus,NumberExpr(3)))),MethodCall(print_string,StringConstant("\n"))))))

moreloop.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt,AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(1)))),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt,AssignVar(x,BinaryExpr(Mod,NumberExpr(32),VariableExpr(y)))),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt,AssignVar(y,BinaryExpr(Div,VariableExpr(y),VariableExpr(y)))),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

multi-list.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Array(100)),FieldDecl(b,IntType,Array(100)),FieldDecl(c,IntType,Array(100)),Method(main,VoidType,None,MethodBlock(None,None))))

multi-var-assign.decaf

multi-var.decaf
Program(None,Package(QuickSort,FieldDecl(a,IntType,Scalar),FieldDecl(b,IntType,Scalar),FieldDecl(c,IntType,Scalar),Method(main,VoidType,None,MethodBlock(None,None))))

nest.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(nest,None,Method(main,IntType,None,MethodBlock(VarDef(i,IntType),VarDef(j,IntType),VarDef(k,IntType),VarDef(l,IntType),VarDef(times,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(times,NumberExpr(0)),ForStmt(AssignVar(i,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(i),NumberExpr(10)),AssignVar(i,BinaryExpr(Plus,VariableExpr(i),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(5)),Block(None,ContinueStmt),None),ForStmt(AssignVar(j,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(j),NumberExpr(10)),AssignVar(j,BinaryExpr(Plus,VariableExpr(j),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(4))),Block(None,ContinueStmt),None),ForStmt(AssignVar(k,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(k),NumberExpr(10)),AssignVar(k,BinaryExpr(Plus,VariableExpr(k),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(8)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(3))),Block(None,ContinueStmt),None),ForStmt(AssignVar(l,NumberExpr(0)),BinaryExpr(Lt,VariableExpr(l),NumberExpr(10)),AssignVar(l,BinaryExpr(Plus,VariableExpr(l),NumberExpr(1))),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(1)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(4))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(1))),Block(None,ContinueStmt),None),AssignVar(times,BinaryExpr(Plus,VariableExpr(times),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(3)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(2))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(6))),BinaryExpr(Eq,VariableExpr(l),NumberExpr(4))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(2)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(7))),BinaryExpr(Eq,VariableExpr(k),NumberExpr(2))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(And,BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),BinaryExpr(Eq,VariableExpr(j),NumberExpr(1))),Block(None,BreakStmt),None))),IfStmt(BinaryExpr(Eq,VariableExpr(i),NumberExpr(9)),Block(None,BreakStmt),None))),MethodCall(print_int,VariableExpr(times))))))

panama.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),Package(C,None,Method(main,IntType,None,MethodBlock(None,IfStmt(BinaryExpr(Or,BinaryExpr(And,BoolExpr(True),MethodCall(a,BoolExpr(True))),BinaryExpr(And,MethodCall(man,None),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("wat"))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(And,MethodCall(a,BoolExpr(False)),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("foo"))),Block(None,IfStmt(BinaryExpr(Or,BoolExpr(True),MethodCall(canal,None)),Block(None,IfStmt(BinaryExpr(And,BinaryExpr(And,BoolExpr(True),BoolExpr(True)),MethodCall(plan,None)),Block(VarDef(flag,BoolType),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(canal,None)),Block(None,MethodCall(print_string,StringConstant("bar")),AssignVar(flag,BoolExpr(False)),ContinueStmt))),Block(None,MethodCall(print_string,StringConstant(", ")),IfStmt(BinaryExpr(Or,MethodCall(a,BoolExpr(False)),BinaryExpr(And,BoolExpr(True),BoolExpr(False))),Block(None,MethodCall(print_string,StringConstant("bash"))),Block(None,IfStmt(BinaryExpr(Or,BinaryExpr(Or,BoolExpr(False),BinaryExpr(And,BoolExpr(True),MethodCall(canal,None))),MethodCall(man,None)),Block(VarDef(flag,BoolType),MethodCall(print_string,StringConstant("--")),AssignVar(flag,BoolExpr(True)),WhileStmt(BinaryExpr(And,VariableExpr(flag),MethodCall(panama,None)),Block(None,AssignVar(flag,BoolExpr(False)),Block(None,Block(None,Block(None,Block(None,MethodCall(print_string,StringConstant("!")),ContinueStmt))))))),None)))))),None))))))),Method(man,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("man")))),Method(plan,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("plan")),ReturnStmt(BoolExpr(False)))),Method(a,BoolType,VarDef(caps,BoolType),MethodBlock(None,IfStmt(VariableExpr(caps),Block(None,MethodCall(print_string,StringConstant("A "))),Block(None,MethodCall(print_string,StringConstant("a ")))),ReturnStmt(BoolExpr(False)))),Method(canal,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("canal")),ReturnStmt(BoolExpr(True)))),Method(panama,BoolType,None,MethodBlock(None,MethodCall(print_string,StringConstant("Panama"))))))

truefalse.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(TF,FieldDecl(TF,IntType,Array(32)),Method(main,IntType,None,MethodBlock(None,MethodCall(print_string,StringConstant("hello\n")),IfStmt(BinaryExpr(Eq,BoolExpr(True),BoolExpr(False)),Block(None,ReturnStmt(NumberExpr(0))),Block(None,ReturnStmt(NumberExpr(0)))),Block(VarDef(x,IntType),AssignVar(x,NumberExpr(3)),AssignVar(x,BinaryExpr(Minus,VariableExpr(x),NumberExpr(32))),AssignArrayLoc(TF,NumberExpr(0),BinaryExpr(Plus,ArrayLocExpr(TF,NumberExpr(0)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(1),BinaryExpr(Div,ArrayLocExpr(TF,NumberExpr(1)),NumberExpr(6))),AssignArrayLoc(TF,NumberExpr(2),BinaryExpr(Mod,ArrayLocExpr(TF,NumberExpr(2)),NumberExpr(3))),AssignArrayLoc(TF,NumberExpr(6),BinaryExpr(Mod,VariableExpr(x),ArrayLocExpr(TF,NumberExpr(2)))))))))

type-errors1.decaf

type-errors2.decaf

type-errors3.decaf

type-errors4.decaf

type-errors5.decaf

type-errors6.decaf

type-ok1.decaf

type-ok2.decaf

whiles.decaf
Program(ExternFunction(print_string,VoidType,VarDef(StringType)),ExternFunction(print_int,VoidType,VarDef(IntType)),Package(whiles,None,Method(main,IntType,None,MethodBlock(VarDef(x,IntType),VarDef(y,IntType),MethodCall(print_string,StringConstant("hello\n")),AssignVar(x,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(x),NumberExpr(10)),Block(None,AssignVar(x,BinaryExpr(Plus,VariableExpr(x),NumberExpr(1))),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(5)),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(x),NumberExpr(7)),Block(None,AssignVar(x,NumberExpr(100)),ContinueStmt),None),AssignVar(y,NumberExpr(0)),WhileStmt(BinaryExpr(Lt,VariableExpr(y),NumberExpr(10)),Block(None,AssignVar(y,BinaryExpr(Plus,VariableExpr(y),NumberExpr(1))),IfStmt(BinaryExpr(And,BinaryExpr(Gt,VariableExpr(y),NumberExpr(3)),BinaryExpr(Lt,VariableExpr(y),NumberExpr(5))),Block(None,ContinueStmt),None),IfStmt(BinaryExpr(Eq,VariableExpr(y),NumberExpr(7)),Block(None,BreakStmt),None),MethodCall(print_int,VariableExpr(x)),MethodCall(print_string,StringConstant(",")),MethodCall(print_int,VariableExpr(y)),MethodCall(print_string,StringConstant("\n")))))),ReturnStmt(NumberExpr(0))))))

xkcd.decaf
Program(ExternFunction(print_int,VoidType,VarDef(IntType)),ExternFunction(print_string,VoidType,VarDef(StringType)),Package(xkcd,None,Method(main,IntType,None,MethodBlock(None,MethodCall(print_int,MethodCall(x,MethodCall(k,MethodCall(c,MethodCall(d,None))))))),Method(x,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(2))))),Method(k,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Mult,VariableExpr(a),NumberExpr(3))))),Method(c,IntType,VarDef(a,IntType),MethodBlock(None,ReturnStmt(BinaryExpr(Plus,VariableExpr(a),NumberExpr(4))))),Method(d,IntType,None,MethodBlock(None,ReturnStmt(NumberExpr(3))))))

