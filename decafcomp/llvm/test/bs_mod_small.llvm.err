; ModuleID = 'bs_mod_small'
source_filename = "Test"

@globalstring = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@globalstring.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@globalstring.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare void @print_string(i8*)

declare void @print_int(i32)

define i1 @main() {
entry:
  %z = alloca i32
  store i32 0, i32* %z
  %y = alloca i32
  store i32 0, i32* %y
  %x = alloca i32
  store i32 0, i32* %x
  store i32 4, i32* %z
  store i32 3, i32* %y
  %z1 = load i32, i32* %z
  %y2 = load i32, i32* %y
  %tempShl = shl i32 %z1, %y2
  store i32 %tempShl, i32* %x
  %x3 = load i32, i32* %x
  %tempShr = lshr i32 %x3, 2
  call void @print_int(i32 %tempShr)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring, i32 0, i32 0))
  %x4 = load i32, i32* %x
  %tempShr5 = lshr i32 %x4, 5
  call void @print_int(i32 %tempShr5)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.1, i32 0, i32 0))
  %x6 = load i32, i32* %x
  %tempShr7 = lshr i32 %x6, 6
  call void @print_int(i32 %tempShr7)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.2, i32 0, i32 0))
  ret void
  ret i1 false
}
