; ModuleID = 'bitshift_small'
source_filename = "Test"

@globalstring = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@globalstring.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@globalstring.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare void @print_int(i32)

declare void @print_string(i8*)

define i32 @main() {
entry:
  %_ = alloca i32
  store i32 0, i32* %_
  %__ = alloca i32
  store i32 0, i32* %__
  %___ = alloca i32
  store i32 0, i32* %___
  store i32 4, i32* %_
  store i32 3, i32* %__
  %_1 = load i32, i32* %_
  %__2 = load i32, i32* %__
  %tempShl = shl i32 %_1, %__2
  store i32 %tempShl, i32* %___
  %___3 = load i32, i32* %___
  %tempShr = lshr i32 %___3, 2
  call void @print_int(i32 %tempShr)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring, i32 0, i32 0))
  %___4 = load i32, i32* %___
  %tempShr5 = lshr i32 %___4, 5
  call void @print_int(i32 %tempShr5)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.1, i32 0, i32 0))
  %___6 = load i32, i32* %___
  %tempShr7 = lshr i32 %___6, 6
  call void @print_int(i32 %tempShr7)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.2, i32 0, i32 0))
  ret i32 0
  ret i32 0
}
