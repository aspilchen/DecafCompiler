; ModuleID = 'byone'
source_filename = "Test"

@globalstring = private unnamed_addr constant [7 x i8] c"hello\0A\00", align 1
@globalstring.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare void @print_string(i8*)

declare void @print_int(i32)

define i32 @sqrt(i32 %a_nInput) {
entry:
  %a_nInput1 = alloca i32
  store i32 %a_nInput, i32* %a_nInput1
  %op = alloca i32
  store i32 0, i32* %op
  %res = alloca i32
  store i32 0, i32* %res
  %one = alloca i32
  store i32 0, i32* %one
  %a_nInput2 = load i32, i32* %a_nInput1
  store i32 %a_nInput2, i32* %op
  store i32 0, i32* %res
  store i32 1073741824, i32* %one
  br label %while

while:                                            ; preds = %ifEnd, %entry
  %one3 = load i32, i32* %one
  %tempNe = icmp ne i32 %one3, 0
  br i1 %tempNe, label %do, label %endWhile

do:                                               ; preds = %while
  br label %if

endWhile:                                         ; preds = %while
  %res17 = load i32, i32* %res
  ret i32 %res17
  ret i32 0

if:                                               ; preds = %do
  %op4 = load i32, i32* %op
  %res5 = load i32, i32* %res
  %one6 = load i32, i32* %one
  %tmpAdd = add i32 %res5, %one6
  %temp = icmp sge i32 %op4, %tmpAdd
  br i1 %temp, label %ifTrue, label %ifEnd

ifTrue:                                           ; preds = %if
  %op7 = load i32, i32* %op
  %res8 = load i32, i32* %res
  %one9 = load i32, i32* %one
  %tmpAdd10 = add i32 %res8, %one9
  %tmpSub = sub i32 %op7, %tmpAdd10
  store i32 %tmpSub, i32* %op
  %res11 = load i32, i32* %res
  %one12 = load i32, i32* %one
  %tempMul = mul i32 2, %one12
  %tmpAdd13 = add i32 %res11, %tempMul
  store i32 %tmpAdd13, i32* %res
  br label %ifEnd

ifEnd:                                            ; preds = %ifTrue, %if
  %res14 = load i32, i32* %res
  %tempShr = lshr i32 %res14, 1
  store i32 %tempShr, i32* %res
  %one15 = load i32, i32* %one
  %tempShr16 = lshr i32 %one15, 2
  store i32 %tempShr16, i32* %one
  br label %while
}

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @globalstring, i32 0, i32 0))
  store i32 1, i32* %x
  br label %for

for:                                              ; preds = %increment, %entry
  %x1 = load i32, i32* %x
  %tempLt = icmp slt i32 %x1, 20
  br i1 %tempLt, label %do, label %endfor

do:                                               ; preds = %for
  %a = alloca i32
  store i32 0, i32* %a
  %x2 = load i32, i32* %x
  %tempMul = mul i32 7, %x2
  %x3 = load i32, i32* %x
  %tempMul4 = mul i32 %tempMul, %x3
  %tmpAdd = add i32 3, %tempMul4
  %x5 = load i32, i32* %x
  %tempMul6 = mul i32 2, %x5
  %tmpAdd7 = add i32 1, %tempMul6
  %x8 = load i32, i32* %x
  %tempMul9 = mul i32 3, %x8
  %x10 = load i32, i32* %x
  %tempMul11 = mul i32 %tempMul9, %x10
  %tmpAdd12 = add i32 %tmpAdd7, %tempMul11
  %calltmp = call i32 @sqrt(i32 %tmpAdd12)
  %tmpSub = sub i32 %tmpAdd, %calltmp
  %x13 = load i32, i32* %x
  %tempMul14 = mul i32 2, %x13
  %tempDiv = sdiv i32 %tmpSub, %tempMul14
  store i32 %tempDiv, i32* %a
  %a15 = load i32, i32* %a
  call void @print_int(i32 %a15)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.1, i32 0, i32 0))
  br label %increment

increment:                                        ; preds = %do
  %x16 = load i32, i32* %x
  %tmpAdd17 = add i32 %x16, 1
  store i32 %tmpAdd17, i32* %x
  br label %for

endfor:                                           ; preds = %for
  ret i32 0
}
